{
  "category":"hr",
  "metaInfo":{
  "openapi": "3.0.0",
  "info": {
      "title": "HR API",
      "description": "This is an internal API to kore to handle all the HR clients in a unified way.",
      "contact": {
          "email": "vishnu.nekkanti@kore.com"
      },
      "license": {
          "name": "Apache 2.0",
          "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "version": "1.0.0"
  },
  "servers": [
      {
          "url": "https://virtserver.swaggerhub.com/K1738/hrbot/1.0.0",
          "description": "SwaggerHub API Auto Mocking"
      },
      {
          "url": "https://virtserver.swaggerhub.com/bhumik1/hrbot-1/1.0.0",
          "description": "SwaggerHub API Auto Mocking"
      },
      {
          "url": "https://virtserver.swaggerhub.com/bhumik/HR-API/1.0.0",
          "description": "SwaggerHub API Auto Mocking"
      },
      {
          "url": "http://localhost:5020/hr/api/v1"
      },
      {
          "url": "https://dev-kore-hr.com/v1",
          "description": "This is development environment API link"
      },
      {
          "url": "https://prod-kore-hr.com/v1",
          "description": "This is Product Environment API  link"
      }
  ],
  "paths": {
      "/benefits/enrolled": {
          "post": {
              "tags": [
                  "Benefit"
              ],
              "summary": "Search the Benefits",
              "description": "Search the Benefits with period_start, period_end, type, name and userId",
              "operationId": "search Benefits",
              "parameters": [
                  {
                      "name": "offset",
                      "in": "query",
                      "description": "number of records to skip for pagination",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "integer",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "maximum number of records to return",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "maximum": 30,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int64"
                      }
                  }
              ],
              "requestBody": {
                  "description": "search parameters",
                  "content": {
                      "application/json": {
                          "schema": {
                              "required": [
                                  "userid"
                              ],
                              "type": "object",
                              "properties": {
                                  "type": {
                                      "type": "string"
                                  },
                                  "name": {
                                      "type": "string"
                                  },
                                  "userid": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/EnrolledBenefit"
                                  },
                                  "x-content-type": "application/json"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid request"
                  },
                  "404": {
                      "description": "Benefit Not found"
                  }
              },
              "x-swagger-router-controller": "EnrolledBenefit"
          }
      },
      "/benefits/enrolled/{id}": {
          "patch": {
              "tags": [
                  "Benefit"
              ],
              "summary": "Updates the Enrolled Benefits with the details",
              "description": "Updates the Enrolled Benefits with the details",
              "operationId": "update Enrolled Benefit",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "ID of Enrolled Benefit to update",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "json object with keys and their corresponding values",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/EnrolledBenefit"
                                  },
                                  "x-content-type": "application/json"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid request"
                  },
                  "404": {
                      "description": "EnrolledBenefit Not found"
                  }
              },
              "x-swagger-router-controller": "EnrolledBenefit"
          }
      },
      "/users": {
          "post": {
              "tags": [
                  "User"
              ],
              "summary": "Fetches all the Users with the username",
              "description": "Fetches all the Users with the username",
              "operationId": "search Users",
              "parameters": [
                  {
                      "name": "offset",
                      "in": "query",
                      "description": "number of records to skip for pagination",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "integer",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "maximum number of records to return",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "maximum": 30,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int64"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Name of user",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/body_1"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/User"
                                  },
                                  "x-content-type": "application/json"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid Username"
                  },
                  "404": {
                      "description": "Username Not found"
                  }
              },
              "x-swagger-router-controller": "User"
          }
      },
      "/users/{id}": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": "Find user by Id",
              "description": "Returns a user with given User id",
              "operationId": "get User By Id",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "ID of user to return",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  }
              },
              "x-swagger-router-controller": "User"
          }
      },
      "/users/self": {
          "get": {
              "tags": [
                  "User"
              ],
              "summary": "Find Current User",
              "description": "Returns Current user",
              "operationId": "get Current User",
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/User"
                              }
                          }
                      }
                  }
              },
              "x-swagger-router-controller": "User"
          }
      },
      "/user/{id}": {
          "patch": {
              "tags": [
                  "User"
              ],
              "summary": "Updates the Users with the details",
              "description": "Updates the Users with the details",
              "operationId": "update User Info",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "ID of user to update",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "Name of user",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "type": "string"
                              }
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/User"
                                  },
                                  "x-content-type": "application/json"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid Username"
                  },
                  "404": {
                      "description": "Username Not found"
                  }
              },
              "x-swagger-router-controller": "User"
          }
      },
      "/timeoff/options/{id}": {
          "get": {
              "tags": [
                  "Time off option"
              ],
              "summary": "reagarding Leaves applicable for the user",
              "description": "Return the Time of Option of User reagarding Leaves applicable",
              "operationId": "get Users Time Off Options",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "users Id(auto generated)",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/TimeOffOption"
                                  },
                                  "x-content-type": "application/json"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid User ID"
                  },
                  "404": {
                      "description": "User ID Not found"
                  }
              },
              "x-swagger-router-controller": "TimeOffOption"
          }
      },
      "/timeoff/apply": {
          "get": {
              "tags": [
                  "Time offs"
              ],
              "summary": "get TimeOffRequest",
              "description": "Updates the Time Off request",
              "operationId": "get Time Off Request",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "users Id(auto generated)",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/TimeOffRequest"
                                  },
                                  "x-content-type": "application/json"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid Request"
                  },
                  "404": {
                      "description": "Data Not found"
                  }
              },
              "x-swagger-router-controller": "TimeOffOption"
          }
      },
      "/timeoff/requests": {
          "post": {
              "tags": [
                  "Time offs"
              ],
              "summary": "Returns Array of Most Recent Time Off Requests",
              "description": "Returns Array of Most Recent Time Off Requests",
              "operationId": "create Time Off Requests",
              "parameters": [
                  {
                      "name": "offset",
                      "in": "query",
                      "description": "number of records to skip for pagination",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "integer",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "maximum number of records to return",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "maximum": 30,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int64"
                      }
                  }
              ],
              "requestBody": {
                  "description": "payslip specifications",
                  "content": {
                      "application/json": {
                          "schema": {
                              "required": [
                                  "managerid",
                                  "userid"
                              ],
                              "type": "object",
                              "properties": {
                                  "userid": {
                                      "type": "string"
                                  },
                                  "managerid": {
                                      "type": "string"
                                  },
                                  "label": {
                                      "type": "string"
                                  },
                                  "status": {
                                      "type": "array",
                                      "items": {
                                          "type": "string"
                                      }
                                  },
                                  "created_start": {
                                      "type": "integer",
                                      "format": "int64"
                                  },
                                  "created_end": {
                                      "type": "integer",
                                      "format": "int64"
                                  }
                              }
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/TimeOffRequest"
                                  },
                                  "x-content-type": "application/json"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid Request"
                  },
                  "404": {
                      "description": "Data Not found"
                  }
              },
              "x-swagger-router-controller": "TimeOffOption"
          }
      },
      "/timeoff/requests/{id}": {
          "patch": {
              "tags": [
                  "Time offs"
              ],
              "summary": "Returns Array of Most Recent Time Off Requests",
              "description": "Returns Array of Most Recent Time Off Requests",
              "operationId": "update Time Off Request Status",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "requestid, updated values => updated TIME_OFF_REQUEST",
                      "required": true,
                      "style": "simple",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "json object with keys and their corresponding values",
                  "content": {
                      "application/json": {
                          "schema": {
                              "type": "array",
                              "items": {
                                  "$ref": "#/components/schemas/UpdateTimeOffRequest"
                              }
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/TimeOffRequest"
                                  },
                                  "x-content-type": "application/json"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid request"
                  },
                  "404": {
                      "description": "TimeOffOption Not found"
                  }
              },
              "x-swagger-router-controller": "TimeOffOption"
          }
      },
      "/payslips": {
          "post": {
              "tags": [
                  "User"
              ],
              "summary": "Returns an array of the payslips ordered as latest first",
              "description": "Returns an array of the payslips ordered as latest first",
              "operationId": "find Payslips",
              "parameters": [
                  {
                      "name": "offset",
                      "in": "query",
                      "description": "number of records to skip for pagination",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "integer",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "limit",
                      "in": "query",
                      "description": "maximum number of records to return",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "maximum": 30,
                          "minimum": 1,
                          "type": "integer",
                          "format": "int64"
                      }
                  }
              ],
              "requestBody": {
                  "description": "payslip specifications",
                  "content": {
                      "application/json": {
                          "schema": {
                              "required": [
                                  "userid"
                              ],
                              "type": "object",
                              "properties": {
                                  "userid": {
                                      "type": "string"
                                  },
                                  "period_start": {
                                      "type": "integer",
                                      "format": "int64"
                                  },
                                  "period_end": {
                                      "type": "integer",
                                      "format": "int64"
                                  }
                              }
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "ok",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "type": "object",
                                  "properties": {
                                      "payslips": {
                                          "type": "array",
                                          "items": {
                                              "$ref": "#/components/schemas/Payslip"
                                          }
                                      },
                                      "combined_zip": {
                                          "type": "array",
                                          "items": {
                                              "$ref": "#/components/schemas/File"
                                          }
                                      }
                                  },
                                  "x-content-type": "application/json"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Invalid payslip"
                  },
                  "404": {
                      "description": "payslip Not found"
                  }
              },
              "x-swagger-router-controller": "User"
          }
      },
      "/files/{id}": {
          "get": {
              "tags": [
                  "Files"
              ],
              "summary": "returns files by Id",
              "description": "Returns a file by id",
              "operationId": "get Files By Id",
              "parameters": [
                  {
                      "name": "id",
                      "in": "path",
                      "description": "ID of files to return",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "ok"
                  }
              },
              "x-swagger-router-controller": "Files"
          }
      },
      "/bulk/download": {
          "post": {
              "tags": [
                  "bulk"
              ],
              "summary": "Create a new bulk download job (asynchronous)",
              "operationId": "create Bulk Download",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "The object body",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/bulkDownloadRequest"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/BulkQuery"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/bulk/jobs": {
          "get": {
              "tags": [
                  "bulk"
              ],
              "summary": "Fetch all the bulk jobs for an instance",
              "operationId": "get Bulk Jobs",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "where",
                      "in": "query",
                      "description": "The CEQL search expression, or the where clause, without the WHERE keyword, in a typical SQL query. For example to get all upload jobs the expression would be where=job_direction='UPLOAD'. The following fields are valid search fields 'object_name', 'job_status', 'job_direction', 'record_count'",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "nextPage",
                      "in": "query",
                      "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The page size for pagination, which defaults to 200 if not supplied",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "integer",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/BulkJobList"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/bulk/query": {
          "post": {
              "tags": [
                  "bulk"
              ],
              "summary": "Create an asynchronous bulk query job.",
              "operationId": "create Bulk Query",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "Elements-Async-Callback-Url",
                      "in": "header",
                      "description": "The Url to send the notification to when the Job is completed",
                      "required": false,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "q",
                      "in": "query",
                      "description": "The CEQL query. When this parameter is omitted, all objects of the given type are returned via the bulk job. Endpoint limiters may still apply.",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "lastRunDate",
                      "in": "query",
                      "description": "The last time this query was run. This is optional. You can also have this parameter in the query and leave this blank - optional eg. '2014-10-06T13:22:17-08:00'",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "from",
                      "in": "query",
                      "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "to",
                      "in": "query",
                      "description": "The created/updated date of the object to filter on - optional eg. '2014-10-06T13:22:17-08:00'",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "multipart/form-data": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "metaData": {
                                      "type": "string",
                                      "description": "Optional JSON MetaData that contains callback-payload and fileName, ex: {\"callback-payload\" : <Json> , \"fileName\" : \"{Date format}_Name of the file\"}. If the fileName is MyFile then pass metadata as {\"fileName\" : \"{yyyy-MM-dd HH:mm:ss}_MyFile\"}. The valid date formats are \"yyyy-MM-dd'T'HH:mm:ssXXX\", \"yyyy-MM-dd'T'HH:mm:ss'Z'\", \"yyyy-MM-dd'T'HH:mm:ss.SXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSXXX\", \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS'Z'\", \"yyyy-MM-dd HH:mm:ss\", \"yyyy.MM.dd G 'at' HH:mm:ss z\", \"h:mm a\", \"yyyyy.MMMMM.dd GGG hh:mm aaa\" and \"yyMMddHHmmssZ\". callback-payload - is passed back in bulk job notification "
                                  }
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/BulkQuery"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/bulk/{id}/cancel": {
          "put": {
              "tags": [
                  "bulk"
              ],
              "summary": "Cancel an asynchronous bulk query job.",
              "operationId": "replace Bulk Cancel",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The ID of the bulk job to cancel.",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/BulkStatus"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/bulk/{id}/errors": {
          "get": {
              "tags": [
                  "bulk"
              ],
              "summary": "Retrieve the errors of a bulk job.",
              "operationId": "get Bulk Errors",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The ID of the bulk job to retrieve its errors.",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The page size for pagination, which defaults to 200 if not supplied",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "integer",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "nextPage",
                      "in": "query",
                      "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/bulk/{id}/status": {
          "get": {
              "tags": [
                  "bulk"
              ],
              "summary": "Retrieve the status of a bulk job.",
              "operationId": "get Bulk Status",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The ID of the bulk job to retrieve its status.",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/BulkStatus"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/bulk/{id}/{objectName}": {
          "get": {
              "tags": [
                  "bulk"
              ],
              "summary": "Retrieve the results of an asynchronous bulk query.",
              "operationId": "get Bulk By Object Name",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The ID of the bulk job",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "text/csv": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary"
                              }
                          },
                          "application/json": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary"
                              }
                          },
                          "application/jsonl": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/bulk/{objectName}": {
          "post": {
              "tags": [
                  "bulk"
              ],
              "summary": "Upload a file of objects to be bulk uploaded to the provider.",
              "operationId": "create Bulk By Object Name",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "Elements-Async-Callback-Url",
                      "in": "header",
                      "description": "The Url to send the notification to when the Job is completed",
                      "required": false,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object for which data needs to be uploaded.",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "multipart/form-data": {
                          "schema": {
                              "type": "object",
                              "properties": {
                                  "metaData": {
                                      "type": "string",
                                      "description": "Optional JSON MetaData that contains callback-payload, path or format, ex: {\"path\" : <path for the sub resource>, \"format\": <json/csv>, \"callback-payload\":<json>}. path - is passed to the endpoint for bulk loading the data into a nested object. Optional JSON Metadata that contains identifierFieldName, action, listId or campaignId. The identifierField name is used for upserts and the optional fields like listId or campaignId. Example: {\"listId\":\"1014\",\"action\":\"upsert\"}. If the Upload format is JSON pass metadata as {\"format\":\"json\"}. callback-payload - is passed back in bulk job notification "
                                  },
                                  "file": {
                                      "type": "string",
                                      "description": "The file of objects to bulk load. If the JSON file upload, each JSON record should be in a single line",
                                      "format": "binary"
                                  }
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/BulkUploadResponse"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/categories": {
          "get": {
              "tags": [
                  "categories"
              ],
              "summary": "Search for attachments",
              "operationId": "get Categories",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of resources to return in a given page",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "nextPage",
                      "in": "query",
                      "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/categoriesAttachmentsListObject"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "post": {
              "tags": [
                  "categories"
              ],
              "summary": "Create a category for an attachment",
              "operationId": "create Category",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "The category json object",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/attachmentCategoryPost"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/attachmentCategoryRes"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/categories/{id}/attachments": {
          "post": {
              "tags": [
                  "categories"
              ],
              "summary": "Create an attachments",
              "operationId": "create Category Attachment",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The category id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "fileName",
                      "in": "query",
                      "description": "The file name",
                      "required": true,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "share",
                      "in": "query",
                      "description": "Weather to make the file available to employees (Yes or no)",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "multipart/form-data": {
                          "schema": {
                              "required": [
                                  "file"
                              ],
                              "type": "object",
                              "properties": {
                                  "file": {
                                      "type": "string",
                                      "description": "The file to be uploaded",
                                      "format": "binary"
                                  }
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected"
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/categories/{id}/attachments/{attachmentId}": {
          "get": {
              "tags": [
                  "categories"
              ],
              "summary": "Retrieve an attachment",
              "operationId": "get Categories Attachment By Attachment Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The category id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "attachmentId",
                      "in": "path",
                      "description": "The attachment ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "type": "string",
                                  "format": "binary"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "patch": {
              "tags": [
                  "categories"
              ],
              "summary": "Update an attachments.  By passing a different category id the attchment will be moved to that new category provided.",
              "operationId": "update Categories Attachment By Attachment Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The category id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "attachmentId",
                      "in": "path",
                      "description": "The attachment id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "The attachment json object",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/updateAttachment"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/attachments"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/employees": {
          "get": {
              "tags": [
                  "employees"
              ],
              "summary": "Search for employeess",
              "operationId": "get Employees",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of resources to return in a given page",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "nextPage",
                      "in": "query",
                      "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/employeesListObject"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "post": {
              "tags": [
                  "employees"
              ],
              "summary": "Create a new employee",
              "operationId": "create Employee",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "The employee json object",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/employeesPost"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/employeesPostRes"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/employees/categories": {
          "post": {
              "tags": [
                  "employees"
              ],
              "summary": "Create a file category for an employee",
              "operationId": "create Employee Category",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "The file category json object",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/employeeCategoryPostReq"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/employeeCategoryPostRes"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/employees/{id}": {
          "get": {
              "tags": [
                  "employees"
              ],
              "summary": "Retrieve an employee",
              "operationId": "get Employee By Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The employee id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/employees"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "patch": {
              "tags": [
                  "employees"
              ],
              "summary": "Update an employee",
              "operationId": "update Employee By Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The employee id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "The employee json object",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/employeesPatch"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/employeesPatchRes"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/employees/{id}/categories": {
          "get": {
              "tags": [
                  "employees"
              ],
              "summary": "Search for attachments of an employee",
              "operationId": "get Employees Categories",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The employee id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The number of resources to return in a given page",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "nextPage",
                      "in": "query",
                      "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/employeesCategoriesAttachmentsListObject"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/employees/{id}/categories/{categoryId}/attachments": {
          "post": {
              "tags": [
                  "employees"
              ],
              "summary": "Create an attachments for an employee",
              "operationId": "create Employee Category Attachment",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The employee id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "The category id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "fileName",
                      "in": "query",
                      "description": "The file name",
                      "required": true,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "share",
                      "in": "query",
                      "description": "Weather to make the file available to employees (yes or no)",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "content": {
                      "multipart/form-data": {
                          "schema": {
                              "required": [
                                  "file"
                              ],
                              "type": "object",
                              "properties": {
                                  "file": {
                                      "type": "string",
                                      "description": "The file to upload",
                                      "format": "binary"
                                  }
                              }
                          }
                      }
                  }
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected"
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/employees/{id}/categories/{categoryId}/attachments/{attachmentId}": {
          "get": {
              "tags": [
                  "employees"
              ],
              "summary": "Retrieve an attachment for an employee",
              "operationId": "get Employees Categories Attachment By Attachment Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The employee id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "The category id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "attachmentId",
                      "in": "path",
                      "description": "The attachmentId id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected"
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "delete": {
              "tags": [
                  "employees"
              ],
              "summary": "Delete an attachment for an employee",
              "operationId": "delete Employees Categories Attachment By Attachment Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The employee id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "The category id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "attachmentId",
                      "in": "path",
                      "description": "The attachmentId id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected"
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "patch": {
              "tags": [
                  "employees"
              ],
              "summary": "Update an attachemnt for an employee",
              "operationId": "update Employees Categories Attachment By Attachment Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "id",
                      "in": "path",
                      "description": "The employee id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "categoryId",
                      "in": "path",
                      "description": "The category id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "attachmentId",
                      "in": "path",
                      "description": "The attachmentId id",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "The attachment json object",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/employeeAttachmentPatch"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/employeesAttachments"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/metadata": {
          "get": {
              "tags": [
                  "metadata"
              ],
              "summary": "Search for /metadata",
              "operationId": "get Metadata",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/metadataGetResObject"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/objects": {
          "get": {
              "tags": [
                  "objects"
              ],
              "summary": "Get a list of all the available objects.",
              "operationId": "get Objects",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "Elements-Version",
                      "in": "header",
                      "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
                      "required": false,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string",
                          "enum": [
                              "Hydrogen",
                              "Helium"
                          ]
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "type": "string"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/objects/{objectName}/docs": {
          "get": {
              "tags": [
                  "objects"
              ],
              "summary": "Get swagger docs for an object.",
              "operationId": "get Objects Object Name Docs",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "discovery",
                      "in": "query",
                      "description": "Include discovery metadata in definitions",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "boolean"
                      }
                  },
                  {
                      "name": "resolveReferences",
                      "in": "query",
                      "description": "Optionally resolve swagger references for an inline object definition",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "boolean"
                      }
                  },
                  {
                      "name": "basic",
                      "in": "query",
                      "description": "Include only OpenAPI / Swagger properties in definitions",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "boolean"
                      }
                  },
                  {
                      "name": "version",
                      "in": "query",
                      "description": "The element swagger version to get the corresponding element swagger, Passing in \"-1\" gives latest element swagger",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string",
                          "default": "-1"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/swaggerDocs"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/objects/{objectName}/metadata": {
          "get": {
              "tags": [
                  "objects"
              ],
              "summary": "Get a list of all the field for an object.",
              "operationId": "get Objects Object Name Metadata",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "Elements-Version",
                      "in": "header",
                      "description": "Elements Version to be used for getting metadata, possible options are Hydrogen, Helium. Default value is Hydrogen",
                      "required": false,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string",
                          "enum": [
                              "Hydrogen",
                              "Helium"
                          ]
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/objectsMetadata"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/ping": {
          "get": {
              "tags": [
                  "ping"
              ],
              "summary": "Ping the Element to confirm that the Hub Element has a heartbeat.  If the Element does not have a heartbeat, an error message will be returned.",
              "operationId": "get Ping",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/Pong"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/{objectName}": {
          "get": {
              "tags": [
                  "Object name"
              ],
              "summary": "Search for {objectName}",
              "operationId": "get By Object Name",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "where",
                      "in": "query",
                      "description": "The CEQL search expression.",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "integer",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "nextPage",
                      "in": "query",
                      "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/Object"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "post": {
              "tags": [
                  "Object name"
              ],
              "summary": "Create an {objectName}",
              "operationId": "create By Object Name",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/Object"
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected"
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/{objectName}/{objectId}": {
          "get": {
              "tags": [
                  "Object name"
              ],
              "summary": "Retrieve an {objectName}",
              "operationId": "get Object Name By Object Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectId",
                      "in": "path",
                      "description": "The {objectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "application/json": {
                              "schema": {
                                  "$ref": "#/components/schemas/Object"
                              }
                          },
                          "application/pdf": {
                              "schema": {
                                  "$ref": "#/components/schemas/Object"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "put": {
              "tags": [
                  "Object name"
              ],
              "summary": "Update an {objectName}",
              "operationId": "replace Object Name By Object Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectId",
                      "in": "path",
                      "description": "The {objectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/Object"
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/Object"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Object name"
              ],
              "summary": "Delete an {objectName}",
              "operationId": "delete Object Name By Object Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectId",
                      "in": "path",
                      "description": "The {objectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected"
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "patch": {
              "tags": [
                  "Object name"
              ],
              "summary": "Update an {objectName}",
              "operationId": "update Object Name By Object Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectId",
                      "in": "path",
                      "description": "The {objectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/Object"
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/Object"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the 'Accept' header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/{objectName}/{objectId}/{childObjectName}": {
          "get": {
              "tags": [
                  "Object name"
              ],
              "summary": "Search for {childObjectName}",
              "operationId": "get Object Name By Child Object Name",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectId",
                      "in": "path",
                      "description": "The {objectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "childObjectName",
                      "in": "path",
                      "description": "The name of the childObjectName",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "where",
                      "in": "query",
                      "description": "The CEQL search expression.",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "pageSize",
                      "in": "query",
                      "description": "The page size. Defaults to 200 if not provided. Maximum of 5000.",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "integer",
                          "format": "int64"
                      }
                  },
                  {
                      "name": "nextPage",
                      "in": "query",
                      "description": "The next page cursor, taken from the response header: `elements-next-page-token`",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "fields",
                      "in": "query",
                      "description": "The fields to return on the response. Can be a single field or a comma-separated list of fields",
                      "required": false,
                      "style": "form",
                      "explode": true,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "type": "array",
                                  "items": {
                                      "$ref": "#/components/schemas/Object"
                                  }
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "post": {
              "tags": [
                  "Object name"
              ],
              "summary": "Create an {objectName}",
              "operationId": "create Object Name By Child Object Name",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectId",
                      "in": "path",
                      "description": "The {objectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "childObjectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "description": "The {childObjectName}",
                  "content": {
                      "application/json": {
                          "schema": {
                              "$ref": "#/components/schemas/Object"
                          }
                      }
                  },
                  "required": true
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected"
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      },
      "/{objectName}/{objectId}/{childObjectName}/{childObjectId}": {
          "get": {
              "tags": [
                  "Object name"
              ],
              "summary": "Retrieve an {childObjectName}",
              "operationId": "get Object Name By Child Object Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "childObjectName",
                      "in": "path",
                      "description": "The name of the childObjectName",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectId",
                      "in": "path",
                      "description": "The {objectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "childObjectId",
                      "in": "path",
                      "description": "The {childObjectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/Object"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "put": {
              "tags": [
                  "Object name"
              ],
              "summary": "Update an {childObjectName}",
              "operationId": "replace Object Name By Child Object Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "childObjectName",
                      "in": "path",
                      "description": "The name of the childObjectName",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectId",
                      "in": "path",
                      "description": "The {objectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "childObjectId",
                      "in": "path",
                      "description": "The {childObjectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/Object"
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/Object"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "delete": {
              "tags": [
                  "Object name"
              ],
              "summary": "Delete an {childObjectName}",
              "operationId": "delete Object Name By Child Object Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "childObjectName",
                      "in": "path",
                      "description": "The name of the childObjectName",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectId",
                      "in": "path",
                      "description": "The {objectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "childObjectId",
                      "in": "path",
                      "description": "The {childObjectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected"
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          },
          "patch": {
              "tags": [
                  "Object name"
              ],
              "summary": "Update an {childObjectName}",
              "operationId": "update Object Name By Child Object Id",
              "parameters": [
                  {
                      "name": "Authorization",
                      "in": "header",
                      "description": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectName",
                      "in": "path",
                      "description": "The name of the object",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "childObjectName",
                      "in": "path",
                      "description": "The name of the childObjectName",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "objectId",
                      "in": "path",
                      "description": "The {objectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  },
                  {
                      "name": "childObjectId",
                      "in": "path",
                      "description": "The {childObjectName} ID",
                      "required": true,
                      "style": "simple",
                      "explode": false,
                      "schema": {
                          "type": "string"
                      }
                  }
              ],
              "requestBody": {
                  "$ref": "#/components/requestBodies/Object"
              },
              "responses": {
                  "200": {
                      "description": "OK - Everything worked as expected",
                      "content": {
                          "*/*": {
                              "schema": {
                                  "$ref": "#/components/schemas/Object"
                              }
                          }
                      }
                  },
                  "400": {
                      "description": "Bad Request - Often due to a missing request parameter"
                  },
                  "401": {
                      "description": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  },
                  "403": {
                      "description": "Forbidden - Access to the resource by the provider is forbidden"
                  },
                  "404": {
                      "description": "Not found - The requested resource is not found"
                  },
                  "405": {
                      "description": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  },
                  "406": {
                      "description": "Not acceptable - The response content type does not match the &quot;Accept&quot; header value"
                  },
                  "409": {
                      "description": "Conflict - If a resource being created already exists"
                  },
                  "415": {
                      "description": "Unsupported media type - The server cannot handle the requested Content-Type"
                  },
                  "500": {
                      "description": "Server error - Something went wrong on the Cloud Elements server"
                  },
                  "502": {
                      "description": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              }
          }
      }
  },
  "components": {
      "schemas": {
          "User": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "username": {
                      "type": "string"
                  },
                  "first_name": {
                      "type": "string"
                  },
                  "middle_name": {
                      "type": "string"
                  },
                  "last_name": {
                      "type": "string"
                  },
                  "display_name": {
                      "type": "string"
                  },
                  "preferred_name": {
                      "type": "string"
                  },
                  "gender": {
                      "type": "string"
                  },
                  "marital_status": {
                      "type": "string"
                  },
                  "email": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Email"
                      }
                  },
                  "phone": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Phone"
                      }
                  },
                  "dob": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "hire_date": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "is_manager": {
                      "type": "boolean"
                  },
                  "direct_reports": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DirectReport"
                      }
                  },
                  "address": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Address"
                      }
                  },
                  "driver_license": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/DrivingLicense"
                      }
                  },
                  "hours": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/WorkHours"
                      }
                  },
                  "manager": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "department": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "timezone": {
                      "type": "string"
                  },
                  "photo": {
                      "type": "string"
                  },
                  "properties": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Property"
                      }
                  }
              },
              "example": {
                  "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "address": [
                      {
                          "country": "country",
                          "city": "city",
                          "street": "street",
                          "addr_line2": "addr_line2",
                          "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                          "label": "work,personal,etc.",
                          "addr_line3": "addr_line3",
                          "state": "state",
                          "postal_code": 7
                      },
                      {
                          "country": "country",
                          "city": "city",
                          "street": "street",
                          "addr_line2": "addr_line2",
                          "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                          "label": "work,personal,etc.",
                          "addr_line3": "addr_line3",
                          "state": "state",
                          "postal_code": 7
                      }
                  ],
                  "gender": "gender",
                  "manager": {
                      "_id": "30f358f2da95f928",
                      "type": "Line Manager",
                      "name": "David Smith"
                  },
                  "timezone": "timezone",
                  "last_name": "last_name",
                  "hire_date": 2,
                  "middle_name": "middle_name",
                  "display_name": "display_name",
                  "is_manager": true,
                  "marital_status": "marital_status",
                  "phone": [
                      {
                          "country_code": 0,
                          "number": 1,
                          "extension": 5,
                          "area_code": 6,
                          "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                          "label": "work, personal, etc.",
                          "type": "phone, mobile, fax, etc."
                      },
                      {
                          "country_code": 0,
                          "number": 1,
                          "extension": 5,
                          "area_code": 6,
                          "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                          "label": "work, personal, etc.",
                          "type": "phone, mobile, fax, etc."
                      }
                  ],
                  "dob": 5,
                  "department": {
                      "_id": "wpTe7lJD",
                      "display_value": "ITSM"
                  },
                  "first_name": "first_name",
                  "preferred_name": "preferred_name",
                  "email": [
                      {
                          "address": "example@example.com",
                          "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                          "label": "work,personal,etc."
                      },
                      {
                          "address": "example@example.com",
                          "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                          "label": "work,personal,etc."
                      }
                  ],
                  "properties": [
                      {
                          "display_value": "display_value",
                          "label": "label",
                          "value": "value",
                          "key": "key"
                      },
                      {
                          "display_value": "display_value",
                          "label": "label",
                          "value": "value",
                          "key": "key"
                      }
                  ],
                  "username": "username"
              }
          },
          "Phone": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "label": {
                      "type": "string",
                      "example": "work, personal, etc."
                  },
                  "type": {
                      "type": "string",
                      "example": "phone, mobile, fax, etc."
                  },
                  "country_code": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "area_code": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "number": {
                      "type": "integer",
                      "format": "int64"
                  },
                  "extension": {
                      "type": "integer",
                      "format": "int64"
                  }
              },
              "example": {
                  "country_code": 0,
                  "number": 1,
                  "extension": 5,
                  "area_code": 6,
                  "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "label": "work, personal, etc.",
                  "type": "phone, mobile, fax, etc."
              }
          },
          "Email": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "label": {
                      "type": "string",
                      "example": "work,personal,etc."
                  },
                  "address": {
                      "type": "string",
                      "example": "example@example.com"
                  }
              },
              "example": {
                  "address": "example@example.com",
                  "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "label": "work,personal,etc."
              }
          },
          "Address": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "label": {
                      "type": "string",
                      "example": "work,personal,etc."
                  },
                  "street": {
                      "type": "string"
                  },
                  "addr_line2": {
                      "type": "string"
                  },
                  "addr_line3": {
                      "type": "string"
                  },
                  "city": {
                      "type": "string"
                  },
                  "state": {
                      "type": "string"
                  },
                  "country": {
                      "type": "string"
                  },
                  "postal_code": {
                      "type": "integer",
                      "format": "int64"
                  }
              },
              "example": {
                  "country": "country",
                  "city": "city",
                  "street": "street",
                  "addr_line2": "addr_line2",
                  "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "label": "work,personal,etc.",
                  "addr_line3": "addr_line3",
                  "state": "state",
                  "postal_code": 7
              }
          },
          "DirectReport": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "user_id": {
                      "type": "string"
                  },
                  "display_name": {
                      "type": "string"
                  },
                  "manager_id": {
                      "type": "string"
                  },
                  "designation": {
                      "type": "string"
                  }
              }
          },
          "DrivingLicense": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "country": {
                      "type": "string"
                  },
                  "province": {
                      "type": "string"
                  },
                  "number": {
                      "type": "string"
                  }
              }
          },
          "WorkHours": {
              "type": "object",
              "properties": {
                  "dow": {
                      "type": "string",
                      "example": "0"
                  },
                  "start": {
                      "type": "string",
                      "example": "900"
                  },
                  "end": {
                      "type": "string",
                      "example": "1700"
                  }
              }
          },
          "Property": {
              "type": "object",
              "properties": {
                  "label": {
                      "type": "string"
                  },
                  "key": {
                      "type": "string"
                  },
                  "display_value": {
                      "type": "string"
                  },
                  "value": {
                      "type": "string"
                  }
              },
              "example": {
                  "display_value": "display_value",
                  "label": "label",
                  "value": "value",
                  "key": "key"
              }
          },
          "EnrolledBenefit": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "userid": {
                      "type": "string"
                  },
                  "label": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string"
                  },
                  "provider": {
                      "type": "string"
                  },
                  "currency": {
                      "type": "string"
                  },
                  "recur": {
                      "type": "string"
                  },
                  "enrolled_date": {
                      "type": "integer"
                  },
                  "start_date": {
                      "type": "integer"
                  },
                  "end_date": {
                      "type": "integer"
                  },
                  "cost": {
                      "type": "integer"
                  },
                  "coverage_amount": {
                      "type": "integer"
                  },
                  "dependents": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/Dependent"
                      }
                  },
                  "allowed_dependents": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              }
          },
          "Dependent": {
              "type": "object",
              "properties": {
                  "first_name": {
                      "type": "string"
                  },
                  "middle_name": {
                      "type": "string"
                  },
                  "last_name": {
                      "type": "string"
                  },
                  "display_name": {
                      "type": "string"
                  },
                  "public_id": {
                      "type": "string"
                  },
                  "dob": {
                      "type": "string"
                  },
                  "gender": {
                      "type": "string"
                  },
                  "relation": {
                      "type": "string"
                  },
                  "coverage_amount": {
                      "type": "integer"
                  },
                  "relation_date": {
                      "type": "string"
                  }
              },
              "example": {
                  "gender": "gender",
                  "last_name": "last_name",
                  "coverage_amount": 2,
                  "middle_name": "middle_name",
                  "display_name": "display_name",
                  "first_name": "first_name",
                  "relation": "relation"
              }
          },
          "TimeOffOption": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "userid": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "label": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string"
                  },
                  "allowed": {
                      "type": "integer"
                  },
                  "day_multiplier": {
                      "type": "integer"
                  },
                  "balance": {
                      "type": "integer"
                  },
                  "policy": {
                      "type": "string"
                  },
                  "cost": {
                      "type": "integer"
                  },
                  "currency": {
                      "type": "string"
                  },
                  "floating": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  }
              },
              "example": {
                  "day_multiplier": 6,
                  "cost": 5,
                  "balance": 1,
                  "allowed": 0,
                  "floating": [
                      5,
                      5
                  ],
                  "currency": "currency",
                  "_id": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "label": "label",
                  "type": "type",
                  "userid": "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
                  "policy": "policy"
              }
          },
          "TimeOffRequest": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string"
                  },
                  "userid": {
                      "type": "string"
                  },
                  "label": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string"
                  },
                  "justification": {
                      "type": "string"
                  },
                  "edit_reason": {
                      "type": "string"
                  },
                  "reject_reason": {
                      "type": "string"
                  },
                  "requested": {
                      "type": "integer"
                  },
                  "start_time": {
                      "type": "string"
                  },
                  "end_time": {
                      "type": "string"
                  },
                  "status": {
                      "type": "string"
                  },
                  "approver": {
                      "type": "string"
                  },
                  "created": {
                      "type": "string"
                  }
              }
          },
          "body": {
              "type": "object",
              "properties": {
                  "period_start": {
                      "type": "integer"
                  },
                  "period_end": {
                      "type": "integer"
                  },
                  "type": {
                      "type": "string"
                  },
                  "name": {
                      "type": "string"
                  },
                  "userid": {
                      "type": "string"
                  }
              }
          },
          "body_1": {
              "type": "object",
              "properties": {
                  "person_names": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "emails": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "designation": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "manager": {
                      "type": "string"
                  }
              }
          },
          "UpdateTimeOffRequest": {
              "required": [
                  "requestid"
              ],
              "type": "object",
              "properties": {
                  "requestid": {
                      "type": "string"
                  },
                  "status": {
                      "type": "string"
                  }
              }
          },
          "Payslip": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "userid": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "start_date": {
                      "type": "string"
                  },
                  "end_date": {
                      "type": "string"
                  },
                  "payment_date": {
                      "type": "string"
                  },
                  "amount": {
                      "type": "integer"
                  },
                  "currency": {
                      "type": "integer"
                  },
                  "generated_date": {
                      "type": "string"
                  },
                  "file": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      }
                  },
                  "breakdown": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/NoteBreakdown"
                      }
                  }
              }
          },
          "NoteBreakdown": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "label": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string"
                  },
                  "amount": {
                      "type": "integer"
                  },
                  "currency": {
                      "type": "string"
                  }
              }
          },
          "File": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "label": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string"
                  },
                  "url": {
                      "type": "string"
                  },
                  "ttl": {
                      "type": "integer"
                  }
              }
          },
          "Compensation": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "userid": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "currency": {
                      "type": "string"
                  },
                  "amount": {
                      "type": "integer"
                  },
                  "breakdown": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/CompensationBreakdown"
                      }
                  }
              }
          },
          "CompensationBreakdown": {
              "type": "object",
              "properties": {
                  "_id": {
                      "type": "string",
                      "format": "uuid"
                  },
                  "label": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string"
                  },
                  "amount": {
                      "type": "integer"
                  },
                  "currency": {
                      "type": "string"
                  }
              }
          },
          "bulkDownloadRequest": {
              "title": "bulkDownloadRequest",
              "required": [
                  "format",
                  "Object name"
              ],
              "type": "object",
              "properties": {
                  "apiLimit": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 100
                  },
                  "continueFromJobId": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 1
                  },
                  "docsHubDetails": {
                      "$ref": "#/components/schemas/bulkDownloadRequestDocsHubDetails"
                  },
                  "filterDateField": {
                      "type": "string",
                      "x-samplevalue": "lastModifiedDate"
                  },
                  "filterNulls": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "format": {
                      "type": "string",
                      "enum": [
                          "application/json",
                          "txt/csv",
                          "application/jsonl"
                      ],
                      "x-samplevalue": "application/json"
                  },
                  "from": {
                      "type": "string",
                      "format": "date-time",
                      "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
                      "x-samplevalue": "2014-10-06T13:22:17-08:00"
                  },
                  "limit": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 107
                  },
                  "notificationUrl": {
                      "type": "string",
                      "x-samplevalue": "https://myreceiver.com/whatever"
                  },
                  "Object name": {
                      "type": "string",
                      "x-samplevalue": "accounts"
                  },
                  "pageSize": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 200
                  },
                  "query": {
                      "$ref": "#/components/schemas/bulkDownloadRequestQuery"
                  },
                  "selectFields": {
                      "type": "string",
                      "x-samplevalue": "a,b,c"
                  },
                  "to": {
                      "type": "string",
                      "format": "date-time",
                      "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
                      "x-samplevalue": "2014-10-10T13:22:17-08:00"
                  },
                  "where": {
                      "type": "string",
                      "x-samplevalue": "name='Alex' and gender='male'"
                  }
              }
          },
          "employeesCategoriesAttachmentsListObject": {
              "type": "object",
              "properties": {
                  "file": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/file"
                      }
                  },
                  "id": {
                      "type": "integer",
                      "format": "int32",
                      "x-readOnly": true
                  },
                  "name": {
                      "type": "string"
                  }
              },
              "x-has-customfields": false,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "categories"
          },
          "BulkUploadResponse": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "description": "Id of the bulk job"
                  },
                  "instanceId": {
                      "type": "integer",
                      "description": "Instance Id of the bulk job",
                      "format": "int64"
                  },
                  "status": {
                      "type": "string",
                      "description": "Status of the bulk job"
                  }
              },
              "description": "BulkLoad response of bulk download."
          },
          "swaggerdefinitions": {
              "title": "definitions",
              "type": "object",
              "properties": {
                  "definition-name": {
                      "$ref": "#/components/schemas/swaggerdefinition-name"
                  }
              },
              "x-has-customfields": false
          },
          "employeesListObject": {
              "title": "employeesList",
              "type": "object",
              "properties": {
                  "address1": {
                      "type": "string",
                      "x-samplevalue": "9856 Albion St"
                  },
                  "address2": {
                      "type": "string",
                      "x-samplevalue": "Bent tree"
                  },
                  "age": {
                      "type": "string",
                      "x-samplevalue": "27"
                  },
                  "bestEmail": {
                      "type": "string",
                      "x-samplevalue": "charlotte@efficientoffice.com",
                      "x-sub-format": "email"
                  },
                  "birthday": {
                      "type": "string",
                      "x-samplevalue": "07-01"
                  },
                  "bonusAmount": {
                      "type": "number",
                      "format": "double",
                      "x-samplevalue": 20.5
                  },
                  "bonusComment": {
                      "type": "string",
                      "x-samplevalue": "some text"
                  },
                  "bonusDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2018-10-11"
                  },
                  "bonusReason": {
                      "type": "string",
                      "x-samplevalue": "reason"
                  },
                  "city": {
                      "type": "string",
                      "x-samplevalue": "Lindon"
                  },
                  "commisionDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2018-10-10"
                  },
                  "commissionAmount": {
                      "type": "number",
                      "format": "double",
                      "x-samplevalue": 20.5
                  },
                  "commissionComment": {
                      "type": "string",
                      "x-samplevalue": "some text"
                  },
                  "commissionDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2018-10-10"
                  },
                  "country": {
                      "type": "string",
                      "x-samplevalue": "United States"
                  },
                  "dateOfBirth": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "1990-07-01"
                  },
                  "department": {
                      "type": "string",
                      "x-samplevalue": "Human Resources"
                  },
                  "displayName": {
                      "type": "string",
                      "x-samplevalue": "x y Abbott"
                  },
                  "division": {
                      "type": "string",
                      "x-samplevalue": "North America"
                  },
                  "eeo": {
                      "type": "string",
                      "x-samplevalue": "Service Workers"
                  },
                  "employeeNumber": {
                      "type": "string",
                      "x-samplevalue": "1"
                  },
                  "employmentHistoryStatus": {
                      "type": "string",
                      "x-readOnly": true,
                      "x-samplevalue": "Full-Time"
                  },
                  "employmentStatus": {
                      "type": "string",
                      "enum": [
                          "Active",
                          "Inactive"
                      ],
                      "x-samplevalue": "Active"
                  },
                  "ethnicity": {
                      "type": "string",
                      "x-samplevalue": "White"
                  },
                  "exempt": {
                      "type": "string",
                      "x-samplevalue": "Exempt"
                  },
                  "firstName": {
                      "type": "string",
                      "x-samplevalue": "x y"
                  },
                  "flsaCode": {
                      "type": "string",
                      "x-samplevalue": "Exempt"
                  },
                  "fullName1": {
                      "type": "string",
                      "x-samplevalue": "x y Abbott"
                  },
                  "fullName2": {
                      "type": "string",
                      "x-samplevalue": "Abbott, x y"
                  },
                  "fullName3": {
                      "type": "string",
                      "x-samplevalue": "Abbott, x y Danielle  (Charlotte)"
                  },
                  "fullName4": {
                      "type": "string",
                      "x-samplevalue": "Abbott, x y Danielle"
                  },
                  "fullName5": {
                      "type": "string",
                      "x-samplevalue": "x y Danielle Abbott"
                  },
                  "gender": {
                      "type": "string",
                      "enum": [
                          "Male",
                          "Female"
                      ],
                      "x-samplevalue": "Female"
                  },
                  "hireDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2018-03-11"
                  },
                  "homeEmail": {
                      "type": "string",
                      "x-samplevalue": "cb@gmail.com",
                      "x-sub-format": "email"
                  },
                  "homePhone": {
                      "type": "string",
                      "x-samplevalue": "415-555-9630"
                  },
                  "id": {
                      "type": "string",
                      "x-readOnly": true,
                      "x-samplevalue": "4"
                  },
                  "includeInPayroll": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "isPhotoUploaded": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "jobTitle": {
                      "type": "string",
                      "x-samplevalue": "Sr. HR Administrator"
                  },
                  "lastChanged": {
                      "type": "string",
                      "format": "date-time",
                      "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
                      "x-samplevalue": "2018-04-04T19:03:49+00:00"
                  },
                  "lastName": {
                      "type": "string",
                      "x-samplevalue": "Abbott"
                  },
                  "linkedIn": {
                      "type": "string",
                      "x-samplevalue": "www.linkedin.com"
                  },
                  "location": {
                      "type": "string",
                      "x-samplevalue": "Lindon, Utah"
                  },
                  "maritalStatus": {
                      "type": "string",
                      "enum": [
                          "Single",
                          "Married",
                          "Domestic Partnership"
                      ],
                      "x-samplevalue": "Married"
                  },
                  "middleName": {
                      "type": "string",
                      "x-samplevalue": "Danielle"
                  },
                  "mobilePhone": {
                      "type": "string",
                      "x-samplevalue": "415-555-8965"
                  },
                  "nickname": {
                      "type": "string",
                      "x-samplevalue": "Charlotte"
                  },
                  "originalHireDate": {
                      "type": "string",
                      "x-samplevalue": "0000-00-00"
                  },
                  "paidPer": {
                      "type": "string",
                      "enum": [
                          "Hour",
                          "Day",
                          "Week",
                          "Month",
                          "Quarter",
                          "Year"
                      ],
                      "x-samplevalue": "Year"
                  },
                  "payChangeReason": {
                      "type": "string",
                      "x-samplevalue": "Promotion"
                  },
                  "payFrequency": {
                      "type": "string",
                      "enum": [
                          "Daily",
                          "Weekly",
                          "Every other week",
                          "Twice a month",
                          "Monthly",
                          "Quarterly",
                          "Twice a year",
                          "Yearly"
                      ],
                      "x-samplevalue": "Monthly"
                  },
                  "payGroup": {
                      "type": "string",
                      "x-samplevalue": "some Group"
                  },
                  "payGroupId": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 47
                  },
                  "payPer": {
                      "type": "string",
                      "x-samplevalue": "Year"
                  },
                  "payPeriod": {
                      "type": "string",
                      "enum": [
                          "Daily",
                          "Weekly",
                          "Every other week",
                          "Twice a month",
                          "Monthly",
                          "Quarterly",
                          "Twice a year",
                          "Yearly"
                      ],
                      "x-samplevalue": "Twice a month"
                  },
                  "payRate": {
                      "type": "string",
                      "x-samplevalue": "65000.00 USD"
                  },
                  "payRateEffectiveDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2017-03-22"
                  },
                  "paySchedule": {
                      "type": "string",
                      "x-samplevalue": "Twice a month"
                  },
                  "payScheduleId": {
                      "type": "string",
                      "x-samplevalue": "18347"
                  },
                  "payType": {
                      "type": "string",
                      "enum": [
                          "hourly",
                          "salary",
                          "commission",
                          "exception hourly",
                          "monthly",
                          "weekly",
                          "piece rate",
                          "contract",
                          "daily",
                          "pro data"
                      ],
                      "x-samplevalue": "Salary"
                  },
                  "photoUploaded": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "photoUrl": {
                      "type": "string",
                      "x-samplevalue": "https://02f04eb30e85e771b233-ee8ba08b3a40a8dacb36d2897dac0b32.ssl.cf1.rackcdn.com/photos/4-0-1.jpg"
                  },
                  "preferredName": {
                      "type": "string",
                      "x-samplevalue": "cb"
                  },
                  "sin": {
                      "type": "string",
                      "x-samplevalue": "121 212 121 "
                  },
                  "ssn": {
                      "type": "string",
                      "x-samplevalue": "555-64-8712"
                  },
                  "standardHoursPerWeek": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 40
                  },
                  "state": {
                      "type": "string",
                      "x-samplevalue": "UT"
                  },
                  "stateCode": {
                      "type": "string",
                      "x-samplevalue": "UT"
                  },
                  "status": {
                      "type": "string",
                      "x-samplevalue": "Active"
                  },
                  "supervisor": {
                      "type": "string",
                      "x-samplevalue": "Jennifer Caldwell"
                  },
                  "supervisorEId": {
                      "type": "string",
                      "x-samplevalue": "9"
                  },
                  "supervisorId": {
                      "type": "string",
                      "x-samplevalue": "6"
                  },
                  "terminationDate": {
                      "type": "string",
                      "x-samplevalue": "0000-00-00"
                  },
                  "workEmail": {
                      "type": "string",
                      "x-samplevalue": "charlotte@efficientoffice.com",
                      "x-sub-format": "email"
                  },
                  "workPhone": {
                      "type": "string",
                      "x-samplevalue": "801-724-6600"
                  },
                  "workPhoneExtension": {
                      "type": "string",
                      "x-samplevalue": "1272"
                  },
                  "workPhonePlusExtension": {
                      "type": "string",
                      "x-samplevalue": "801-724-6600 ext 1272"
                  },
                  "zipcode": {
                      "type": "string",
                      "x-samplevalue": "84042"
                  }
              },
              "x-has-customfields": true,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "employees"
          },
          "swaggerdefinition-name": {
              "title": "definition-name",
              "type": "object",
              "properties": {
                  "properties": {
                      "$ref": "#/components/schemas/swaggerproperties"
                  }
              },
              "x-has-customfields": false
          },
          "swaggerparameters": {
              "title": "parameters",
              "type": "object",
              "properties": {
                  "schema": {
                      "$ref": "#/components/schemas/swaggerparametersschema"
                  },
                  "in": {
                      "type": "string",
                      "x-samplevalue": "header"
                  },
                  "name": {
                      "type": "string",
                      "x-samplevalue": "Authorization"
                  },
                  "description": {
                      "type": "string",
                      "x-samplevalue": "The authorization tokens. The format for the header value is 'Element &lt;token&gt;, User &lt;user secret&gt;'"
                  },
                  "type": {
                      "type": "string",
                      "x-samplevalue": "string"
                  },
                  "required": {
                      "type": "boolean",
                      "x-samplevalue": true
                  }
              },
              "x-has-customfields": false
          },
          "usersListObject": {
              "type": "object",
              "properties": {
                  "email": {
                      "type": "string"
                  },
                  "employeeId": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "firstName": {
                      "type": "string"
                  },
                  "id": {
                      "type": "integer",
                      "format": "int32"
                  },
                  "lastLogin": {
                      "type": "string"
                  },
                  "lastName": {
                      "type": "string"
                  },
                  "status": {
                      "type": "string"
                  }
              },
              "x-has-customfields": false,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "users"
          },
          "swagger-contacts-path": {
              "title": "/contacts",
              "type": "object",
              "properties": {
                  "post": {
                      "$ref": "#/components/schemas/swaggerpost"
                  }
              },
              "x-has-customfields": false
          },
          "categoriesAttachmentsListObject": {
              "type": "object",
              "properties": {
                  "file": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/file"
                      }
                  },
                  "id": {
                      "type": "integer",
                      "description": "The category id",
                      "format": "int32",
                      "x-readOnly": true
                  },
                  "name": {
                      "type": "string"
                  }
              },
              "x-has-customfields": false,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "categories"
          },
          "attachmentCategoryRes": {
              "title": "attachmentCategoryRes",
              "type": "object",
              "properties": {
                  "status": {
                      "type": "string",
                      "x-samplevalue": "success"
                  }
              },
              "x-has-customfields": false
          },
          "swagger200": {
              "title": "200",
              "type": "object",
              "properties": {
                  "schema": {
                      "$ref": "#/components/schemas/swaggerschema"
                  },
                  "description": {
                      "type": "string",
                      "x-samplevalue": "OK - Everything worked as expected"
                  }
              },
              "x-has-customfields": false
          },
          "swagger400": {
              "title": "400",
              "type": "object",
              "properties": {
                  "description": {
                      "type": "string",
                      "x-samplevalue": "Bad Request - Often due to a missing request parameter"
                  }
              },
              "x-has-customfields": false
          },
          "swagger401": {
              "title": "401",
              "type": "object",
              "properties": {
                  "description": {
                      "type": "string",
                      "x-samplevalue": "Unauthorized - An invalid element token, user secret and/or org secret provided"
                  }
              },
              "x-has-customfields": false
          },
          "swagger403": {
              "title": "403",
              "type": "object",
              "properties": {
                  "description": {
                      "type": "string",
                      "x-samplevalue": "Forbidden - Access to the resource by the provider is forbidden"
                  }
              },
              "x-has-customfields": false
          },
          "swagger404": {
              "title": "404",
              "type": "object",
              "properties": {
                  "description": {
                      "type": "string",
                      "x-samplevalue": "Not found - The requested resource is not found"
                  }
              },
              "x-has-customfields": false
          },
          "swagger405": {
              "title": "405",
              "type": "object",
              "properties": {
                  "description": {
                      "type": "string",
                      "x-samplevalue": "Method not allowed - Incorrect HTTP verb used, e.g., GET used when POST expected"
                  }
              },
              "x-has-customfields": false
          },
          "swaggerDocs": {
              "title": "swaggerDocs",
              "type": "object",
              "properties": {
                  "basePath": {
                      "type": "string",
                      "x-samplevalue": "/elements/api-v2/hubs/crm"
                  },
                  "paths": {
                      "$ref": "#/components/schemas/swaggerpaths"
                  },
                  "host": {
                      "type": "string",
                      "x-samplevalue": "localhost:5050"
                  },
                  "schemes": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "x-samplevalue": [
                          "http"
                      ]
                  },
                  "definitions": {
                      "$ref": "#/components/schemas/swaggerdefinitions"
                  },
                  "swagger": {
                      "type": "string",
                      "x-samplevalue": "2.0"
                  },
                  "info": {
                      "$ref": "#/components/schemas/swaggerinfo"
                  },
                  "tags": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/swaggertags"
                      }
                  }
              },
              "x-has-customfields": false
          },
          "metadataGetResObject": {
              "title": "metadataGetRes",
              "type": "object",
              "properties": {
                  "alias": {
                      "type": "string",
                      "x-samplevalue": "address1"
                  },
                  "deprecated": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "id": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 4175
                  },
                  "name": {
                      "type": "string",
                      "x-samplevalue": "Accrual Level Start Date"
                  },
                  "type": {
                      "type": "string",
                      "x-samplevalue": "date"
                  }
              }
          },
          "swaggercontact": {
              "title": "contact",
              "type": "object",
              "properties": {
                  "email": {
                      "type": "string",
                      "x-samplevalue": "support@cloud-elements.com"
                  }
              },
              "x-has-customfields": false
          },
          "bulkDownloadRequestQuery": {
              "title": "query",
              "type": "object",
              "properties": {
                  "anyKey": {
                      "type": "string",
                      "x-samplevalue": "anyValue"
                  }
              }
          },
          "swagger406": {
              "title": "406",
              "type": "object",
              "properties": {
                  "description": {
                      "type": "string",
                      "x-samplevalue": "Not acceptable - The response content type does not match the 'Accept' header value"
                  }
              },
              "x-has-customfields": false
          },
          "swaggerdefinition-property": {
              "title": "#/definitions/definition-property",
              "type": "object",
              "properties": {
                  "type": {
                      "type": "string",
                      "x-samplevalue": "string"
                  }
              },
              "x-has-customfields": false
          },
          "Object": {
              "type": "object",
              "properties": {
                  "objectField": {
                      "type": "string"
                  }
              },
              "description": "Fields for the object. There will be fields associated with an Object, which are not all described here."
          },
          "swagger409": {
              "title": "409",
              "type": "object",
              "properties": {
                  "description": {
                      "type": "string",
                      "x-samplevalue": "Conflict - If a resource being created already exists"
                  }
              },
              "x-has-customfields": false
          },
          "employees": {
              "type": "object",
              "properties": {
                  "address1": {
                      "type": "string",
                      "x-samplevalue": "9856 Albion St"
                  },
                  "address2": {
                      "type": "string",
                      "x-samplevalue": "Bent tree"
                  },
                  "age": {
                      "type": "string",
                      "x-samplevalue": "27"
                  },
                  "bestEmail": {
                      "type": "string",
                      "x-samplevalue": "charlotte@efficientoffice.com",
                      "x-sub-format": "email"
                  },
                  "birthday": {
                      "type": "string",
                      "x-samplevalue": "07-01"
                  },
                  "bonusAmount": {
                      "type": "number",
                      "format": "double",
                      "x-samplevalue": 20.5
                  },
                  "bonusComment": {
                      "type": "string",
                      "x-samplevalue": "some text"
                  },
                  "bonusDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2018-10-11"
                  },
                  "bonusReason": {
                      "type": "string",
                      "x-samplevalue": "reason"
                  },
                  "city": {
                      "type": "string",
                      "x-samplevalue": "Lindon"
                  },
                  "commisionDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2018-10-10"
                  },
                  "commissionAmount": {
                      "type": "number",
                      "format": "double",
                      "x-samplevalue": 20.5
                  },
                  "commissionComment": {
                      "type": "string",
                      "x-samplevalue": "some text"
                  },
                  "commissionDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2018-10-10"
                  },
                  "country": {
                      "type": "string",
                      "x-samplevalue": "United States"
                  },
                  "dateOfBirth": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "1990-07-01"
                  },
                  "department": {
                      "type": "string",
                      "x-samplevalue": "Human Resources"
                  },
                  "displayName": {
                      "type": "string",
                      "x-samplevalue": "x y Abbott"
                  },
                  "division": {
                      "type": "string",
                      "x-samplevalue": "North America"
                  },
                  "eeo": {
                      "type": "string",
                      "x-samplevalue": "Service Workers"
                  },
                  "employeeNumber": {
                      "type": "string",
                      "x-samplevalue": "1"
                  },
                  "employmentHistoryStatus": {
                      "type": "string",
                      "x-readOnly": true,
                      "x-samplevalue": "Full-Time"
                  },
                  "employmentStatus": {
                      "type": "string",
                      "enum": [
                          "Active",
                          "Inactive"
                      ],
                      "x-samplevalue": "Active"
                  },
                  "ethnicity": {
                      "type": "string",
                      "x-samplevalue": "White"
                  },
                  "exempt": {
                      "type": "string",
                      "x-samplevalue": "Exempt"
                  },
                  "firstName": {
                      "type": "string",
                      "x-samplevalue": "x y"
                  },
                  "flsaCode": {
                      "type": "string",
                      "x-samplevalue": "Exempt"
                  },
                  "fullName1": {
                      "type": "string",
                      "x-samplevalue": "x y Abbott"
                  },
                  "fullName2": {
                      "type": "string",
                      "x-samplevalue": "Abbott, x y"
                  },
                  "fullName3": {
                      "type": "string",
                      "x-samplevalue": "Abbott, x y Danielle  (Charlotte)"
                  },
                  "fullName4": {
                      "type": "string",
                      "x-samplevalue": "Abbott, x y Danielle"
                  },
                  "fullName5": {
                      "type": "string",
                      "x-samplevalue": "x y Danielle Abbott"
                  },
                  "gender": {
                      "type": "string",
                      "enum": [
                          "Male",
                          "Female"
                      ],
                      "x-samplevalue": "Female"
                  },
                  "hireDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2018-03-11"
                  },
                  "homeEmail": {
                      "type": "string",
                      "x-samplevalue": "cb@gmail.com",
                      "x-sub-format": "email"
                  },
                  "homePhone": {
                      "type": "string",
                      "x-samplevalue": "415-555-9630"
                  },
                  "id": {
                      "type": "string",
                      "x-readOnly": true,
                      "x-samplevalue": "4"
                  },
                  "includeInPayroll": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "isPhotoUploaded": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "jobTitle": {
                      "type": "string",
                      "x-samplevalue": "Sr. HR Administrator"
                  },
                  "lastChanged": {
                      "type": "string",
                      "format": "date-time",
                      "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
                      "x-samplevalue": "2018-04-04T19:03:49+00:00"
                  },
                  "lastName": {
                      "type": "string",
                      "x-samplevalue": "Abbott"
                  },
                  "linkedIn": {
                      "type": "string",
                      "x-samplevalue": "www.linkedin.com"
                  },
                  "location": {
                      "type": "string",
                      "x-samplevalue": "Lindon, Utah"
                  },
                  "maritalStatus": {
                      "type": "string",
                      "enum": [
                          "Single",
                          "Married",
                          "Domestic Partnership"
                      ],
                      "x-samplevalue": "Married"
                  },
                  "middleName": {
                      "type": "string",
                      "x-samplevalue": "Danielle"
                  },
                  "mobilePhone": {
                      "type": "string",
                      "x-samplevalue": "415-555-8965"
                  },
                  "nickname": {
                      "type": "string",
                      "x-samplevalue": "Charlotte"
                  },
                  "originalHireDate": {
                      "type": "string",
                      "x-samplevalue": "0000-00-00"
                  },
                  "paidPer": {
                      "type": "string",
                      "enum": [
                          "Hour",
                          "Day",
                          "Week",
                          "Month",
                          "Quarter",
                          "Year"
                      ],
                      "x-samplevalue": "Year"
                  },
                  "payChangeReason": {
                      "type": "string",
                      "x-samplevalue": "Promotion"
                  },
                  "payFrequency": {
                      "type": "string",
                      "enum": [
                          "Daily",
                          "Weekly",
                          "Every other week",
                          "Twice a month",
                          "Monthly",
                          "Quarterly",
                          "Twice a year",
                          "Yearly"
                      ],
                      "x-samplevalue": "Monthly"
                  },
                  "payGroup": {
                      "type": "string",
                      "x-samplevalue": "some Group"
                  },
                  "payGroupId": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 47
                  },
                  "payPer": {
                      "type": "string",
                      "x-samplevalue": "Year"
                  },
                  "payPeriod": {
                      "type": "string",
                      "enum": [
                          "Daily",
                          "Weekly",
                          "Every other week",
                          "Twice a month",
                          "Monthly",
                          "Quarterly",
                          "Twice a year",
                          "Yearly"
                      ],
                      "x-samplevalue": "Twice a month"
                  },
                  "payRate": {
                      "type": "string",
                      "x-samplevalue": "65000.00 USD"
                  },
                  "payRateEffectiveDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2017-03-22"
                  },
                  "paySchedule": {
                      "type": "string",
                      "x-samplevalue": "Twice a month"
                  },
                  "payScheduleId": {
                      "type": "string",
                      "x-samplevalue": "18347"
                  },
                  "payType": {
                      "type": "string",
                      "enum": [
                          "hourly",
                          "salary",
                          "commission",
                          "exception hourly",
                          "monthly",
                          "weekly",
                          "piece rate",
                          "contract",
                          "daily",
                          "pro data"
                      ],
                      "x-samplevalue": "Salary"
                  },
                  "photoUploaded": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "photoUrl": {
                      "type": "string",
                      "x-samplevalue": "https://02f04eb30e85e771b233-ee8ba08b3a40a8dacb36d2897dac0b32.ssl.cf1.rackcdn.com/photos/4-0-1.jpg"
                  },
                  "preferredName": {
                      "type": "string",
                      "x-samplevalue": "cb"
                  },
                  "sin": {
                      "type": "string",
                      "x-samplevalue": "121 212 121 "
                  },
                  "ssn": {
                      "type": "string",
                      "x-samplevalue": "555-64-8712"
                  },
                  "standardHoursPerWeek": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 40
                  },
                  "state": {
                      "type": "string",
                      "x-samplevalue": "UT"
                  },
                  "stateCode": {
                      "type": "string",
                      "x-samplevalue": "UT"
                  },
                  "status": {
                      "type": "string",
                      "x-samplevalue": "Active"
                  },
                  "supervisor": {
                      "type": "string",
                      "x-samplevalue": "Jennifer Caldwell"
                  },
                  "supervisorEId": {
                      "type": "string",
                      "x-samplevalue": "9"
                  },
                  "supervisorId": {
                      "type": "string",
                      "x-samplevalue": "6"
                  },
                  "terminationDate": {
                      "type": "string",
                      "x-samplevalue": "0000-00-00"
                  },
                  "workEmail": {
                      "type": "string",
                      "x-samplevalue": "charlotte@efficientoffice.com",
                      "x-sub-format": "email"
                  },
                  "workPhone": {
                      "type": "string",
                      "x-samplevalue": "801-724-6600"
                  },
                  "workPhoneExtension": {
                      "type": "string",
                      "x-samplevalue": "1272"
                  },
                  "workPhonePlusExtension": {
                      "type": "string",
                      "x-samplevalue": "801-724-6600 ext 1272"
                  },
                  "zipcode": {
                      "type": "string",
                      "x-samplevalue": "84042"
                  }
              },
              "x-has-customfields": true,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "employees"
          },
          "objectsMetadata": {
              "type": "object",
              "properties": {
                  "fields": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/objectsMetadataFields"
                      }
                  }
              }
          },
          "Pong": {
              "type": "object",
              "properties": {
                  "dateTime": {
                      "type": "string",
                      "format": "date-time"
                  },
                  "endpoint": {
                      "type": "string"
                  },
                  "valid": {
                      "type": "boolean"
                  }
              }
          },
          "updateAttachment": {
              "title": "updateAttachment",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "format": "int32",
                      "x-readOnly": true,
                      "x-samplevalue": 213
                  },
                  "name": {
                      "type": "string",
                      "x-samplevalue": "28f0dc078c2jf6flxr"
                  },
                  "shareWithEmployee": {
                      "type": "string",
                      "x-samplevalue": "no"
                  }
              },
              "x-has-customfields": false,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "file"
          },
          "swaggerschema": {
              "title": "schema",
              "type": "object",
              "properties": {
                  "$ref": {
                      "type": "string",
                      "x-samplevalue": "#/definitions/Contact-POST-Response"
                  }
              },
              "x-has-customfields": false
          },
          "attachments": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "format": "int32",
                      "x-readOnly": true
                  }
              },
              "x-has-customfields": false,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "file"
          },
          "employeesPatchRes": {
              "title": "employeesPatchRes",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "x-readOnly": true,
                      "x-samplevalue": "119"
                  }
              },
              "x-has-customfields": true,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "employees"
          },
          "swagger415": {
              "title": "415",
              "type": "object",
              "properties": {
                  "description": {
                      "type": "string",
                      "x-samplevalue": "Unsupported media type - The server cannot handle the requested Content-Type"
                  }
              },
              "x-has-customfields": false
          },
          "BulkQuery": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string"
                  },
                  "status": {
                      "type": "string"
                  },
                  "instance_id": {
                      "type": "number"
                  }
              }
          },
          "swaggerparametersschema": {
              "title": "schema",
              "type": "object",
              "properties": {
                  "$ref": {
                      "type": "string",
                      "x-samplevalue": "#/definitions/Contact"
                  }
              },
              "x-has-customfields": false
          },
          "swaggerresponses": {
              "title": "responses",
              "type": "object",
              "properties": {
                  "200": {
                      "$ref": "#/components/schemas/swagger200"
                  },
                  "400": {
                      "$ref": "#/components/schemas/swagger400"
                  },
                  "401": {
                      "$ref": "#/components/schemas/swagger401"
                  },
                  "403": {
                      "$ref": "#/components/schemas/swagger403"
                  },
                  "404": {
                      "$ref": "#/components/schemas/swagger404"
                  },
                  "405": {
                      "$ref": "#/components/schemas/swagger405"
                  },
                  "406": {
                      "$ref": "#/components/schemas/swagger406"
                  },
                  "409": {
                      "$ref": "#/components/schemas/swagger409"
                  },
                  "415": {
                      "$ref": "#/components/schemas/swagger415"
                  },
                  "500": {
                      "$ref": "#/components/schemas/swagger500"
                  },
                  "502": {
                      "$ref": "#/components/schemas/swagger502"
                  }
              },
              "x-has-customfields": false
          },
          "swaggerproperties": {
              "title": "properties",
              "type": "object",
              "properties": {
                  "definition-property": {
                      "$ref": "#/components/schemas/swaggerdefinition-property"
                  }
              },
              "x-has-customfields": false
          },
          "file": {
              "type": "object",
              "properties": {
                  "createdBy": {
                      "type": "string"
                  },
                  "dateCreated": {
                      "type": "string"
                  },
                  "id": {
                      "type": "integer",
                      "format": "int32",
                      "x-readOnly": true
                  },
                  "name": {
                      "type": "string"
                  },
                  "originalFileName": {
                      "type": "string"
                  },
                  "shareWithEmployee": {
                      "type": "string"
                  },
                  "size": {
                      "type": "integer",
                      "format": "int32"
                  }
              },
              "x-has-customfields": false,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "files"
          },
          "attachmentCategoryPost": {
              "title": "attachmentCategoryPost",
              "type": "object",
              "properties": {
                  "category": {
                      "type": "string",
                      "x-samplevalue": "My-category"
                  }
              }
          },
          "employeesAttachments": {
              "type": "object",
              "properties": {
                  "status": {
                      "type": "string"
                  }
              }
          },
          "employeeCategoryPostRes": {
              "title": "employeeCategoryPostRes",
              "type": "object",
              "properties": {
                  "status": {
                      "type": "string",
                      "x-samplevalue": "success"
                  }
              }
          },
          "employeeCategoryPostReq": {
              "title": "employeeCategoryPostReq",
              "type": "object",
              "properties": {
                  "category": {
                      "type": "string",
                      "x-samplevalue": "Hello World"
                  }
              }
          },
          "swaggerinfo": {
              "title": "info",
              "type": "object",
              "properties": {
                  "contact": {
                      "$ref": "#/components/schemas/swaggercontact"
                  },
                  "title": {
                      "type": "string",
                      "x-samplevalue": "hubspotcrm"
                  },
                  "version": {
                      "type": "string",
                      "x-samplevalue": "api-v2"
                  }
              },
              "x-has-customfields": false
          },
          "swagger500": {
              "title": "500",
              "type": "object",
              "properties": {
                  "description": {
                      "type": "string",
                      "x-samplevalue": "Server error - Something went wrong on the Cloud Elements server"
                  }
              },
              "x-has-customfields": false
          },
          "swaggerpaths": {
              "title": "paths",
              "type": "object",
              "properties": {
                  "/contacts": {
                      "$ref": "#/components/schemas/swagger-contacts-path"
                  }
              },
              "x-has-customfields": false
          },
          "employeeAttachmentPatch": {
              "type": "object",
              "properties": {
                  "id": {
                      "type": "integer",
                      "format": "int32",
                      "x-readOnly": true,
                      "x-samplevalue": 213
                  },
                  "name": {
                      "type": "string"
                  },
                  "shareWithEmployee": {
                      "type": "string"
                  }
              },
              "x-has-customfields": false,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "file"
          },
          "swagger502": {
              "title": "502",
              "type": "object",
              "properties": {
                  "description": {
                      "type": "string",
                      "x-samplevalue": "Provider server error - Something went wrong on the Provider or Endpoint's server"
                  }
              },
              "x-has-customfields": false
          },
          "BulkStatus": {
              "type": "object",
              "properties": {
                  "batchId": {
                      "type": "number",
                      "description": "Contact/Leads loaded"
                  },
                  "message": {
                      "type": "string"
                  },
                  "numOfLeadsProcessed": {
                      "type": "number",
                      "description": "Contact/Leads loaded"
                  },
                  "numOfRowsFailed": {
                      "type": "number",
                      "description": "Failed count"
                  },
                  "numOfRowsWithWarning": {
                      "type": "number",
                      "description": "Contact/Leads that had warnings"
                  },
                  "status": {
                      "type": "string",
                      "description": "Status of the bulk job"
                  }
              },
              "description": "Status of the bulk upload."
          },
          "employeesPost": {
              "title": "employeesPost",
              "type": "object",
              "properties": {
                  "address1": {
                      "type": "string",
                      "x-samplevalue": "9856 Albion St"
                  },
                  "address2": {
                      "type": "string",
                      "x-samplevalue": "Bent tree"
                  },
                  "age": {
                      "type": "string",
                      "x-samplevalue": "27"
                  },
                  "bestEmail": {
                      "type": "string",
                      "x-samplevalue": "charlotte@efficientoffice.com",
                      "x-sub-format": "email"
                  },
                  "birthday": {
                      "type": "string",
                      "x-samplevalue": "07-01"
                  },
                  "city": {
                      "type": "string",
                      "x-samplevalue": "Lindon"
                  },
                  "country": {
                      "type": "string",
                      "x-samplevalue": "United States"
                  },
                  "dateOfBirth": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "1990-07-01"
                  },
                  "department": {
                      "type": "string",
                      "x-samplevalue": "Human Resources"
                  },
                  "displayName": {
                      "type": "string",
                      "x-samplevalue": "x y Abbott"
                  },
                  "eeo": {
                      "type": "string",
                      "x-samplevalue": "Service Workers"
                  },
                  "employmentStatus": {
                      "type": "string",
                      "enum": [
                          "Active",
                          "Inactive"
                      ],
                      "x-samplevalue": "Active"
                  },
                  "ethnicity": {
                      "type": "string",
                      "x-samplevalue": "White"
                  },
                  "exempt": {
                      "type": "string",
                      "x-samplevalue": "Exempt"
                  },
                  "firstName": {
                      "type": "string",
                      "x-samplevalue": "x y"
                  },
                  "fullName1": {
                      "type": "string",
                      "x-samplevalue": "x y Abbott"
                  },
                  "fullName2": {
                      "type": "string",
                      "x-samplevalue": "Abbott, x y"
                  },
                  "fullName3": {
                      "type": "string",
                      "x-samplevalue": "Abbott, x y Danielle  (Charlotte)"
                  },
                  "fullName4": {
                      "type": "string",
                      "x-samplevalue": "Abbott, x y Danielle"
                  },
                  "fullName5": {
                      "type": "string",
                      "x-samplevalue": "x y Danielle Abbott"
                  },
                  "gender": {
                      "type": "string",
                      "enum": [
                          "Male",
                          "Female"
                      ],
                      "x-samplevalue": "Female"
                  },
                  "hireDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2018-03-11"
                  },
                  "homeEmail": {
                      "type": "string",
                      "x-samplevalue": "cb@gmail.com",
                      "x-sub-format": "email"
                  },
                  "homePhone": {
                      "type": "string",
                      "x-samplevalue": "415-555-9630"
                  },
                  "id": {
                      "type": "string",
                      "x-readOnly": true,
                      "x-samplevalue": "4"
                  },
                  "isPhotoUploaded": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "jobTitle": {
                      "type": "string",
                      "x-samplevalue": "Sr. HR Administrator"
                  },
                  "lastChanged": {
                      "type": "string",
                      "format": "date-time",
                      "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
                      "x-samplevalue": "2018-04-04T19:03:49+00:00"
                  },
                  "lastName": {
                      "type": "string",
                      "x-samplevalue": "Abbott"
                  },
                  "linkedIn": {
                      "type": "string",
                      "x-samplevalue": "www.linkedin.com"
                  },
                  "location": {
                      "type": "string",
                      "x-samplevalue": "Lindon, Utah"
                  },
                  "maritalStatus": {
                      "type": "string",
                      "enum": [
                          "Single",
                          "Married",
                          "Domestic Partnership"
                      ],
                      "x-samplevalue": "Married"
                  },
                  "middleName": {
                      "type": "string",
                      "x-samplevalue": "Danielle"
                  },
                  "mobilePhone": {
                      "type": "string",
                      "x-samplevalue": "415-555-8965"
                  },
                  "originalHireDate": {
                      "type": "string",
                      "x-samplevalue": "0000-00-00"
                  },
                  "payChangeReason": {
                      "type": "string",
                      "x-samplevalue": "Promotion"
                  },
                  "payPer": {
                      "type": "string",
                      "x-samplevalue": "Year"
                  },
                  "payPeriod": {
                      "type": "string",
                      "enum": [
                          "Daily",
                          "Weekly",
                          "Every other week",
                          "Twice a month",
                          "Monthly",
                          "Quarterly",
                          "Twice ayear",
                          "Yearly"
                      ],
                      "x-samplevalue": "Twice a month"
                  },
                  "payRate": {
                      "type": "string",
                      "x-samplevalue": "65000.00 USD"
                  },
                  "payRateEffectiveDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2017-03-22"
                  },
                  "paySchedule": {
                      "type": "string",
                      "x-samplevalue": "Twice a month"
                  },
                  "payScheduleId": {
                      "type": "string",
                      "x-samplevalue": "18347"
                  },
                  "payType": {
                      "type": "string",
                      "enum": [
                          "hourly",
                          "salary",
                          "commission",
                          "exception hourly",
                          "monthly",
                          "weekly",
                          "piece rate",
                          "contract",
                          "daily",
                          "pro data"
                      ],
                      "x-samplevalue": "Salary"
                  },
                  "photoUploaded": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "photoUrl": {
                      "type": "string",
                      "x-samplevalue": "https://02f04eb30e85e771b233-ee8ba08b3a40a8dacb36d2897dac0b32.ssl.cf1.rackcdn.com/photos/4-0-1.jpg"
                  },
                  "preferredName": {
                      "type": "string",
                      "x-samplevalue": "cb"
                  },
                  "sin": {
                      "type": "string",
                      "x-samplevalue": "121 212 121 "
                  },
                  "ssn": {
                      "type": "string",
                      "x-samplevalue": "555-64-8712"
                  },
                  "state": {
                      "type": "string",
                      "x-samplevalue": "UT"
                  },
                  "stateCode": {
                      "type": "string",
                      "x-samplevalue": "UT"
                  },
                  "status": {
                      "type": "string",
                      "x-samplevalue": "Active"
                  },
                  "terminationDate": {
                      "type": "string",
                      "x-samplevalue": "0000-00-00"
                  },
                  "workEmail": {
                      "type": "string",
                      "x-samplevalue": "charlotte@efficientoffice.com",
                      "x-sub-format": "email"
                  },
                  "workPhone": {
                      "type": "string",
                      "x-samplevalue": "801-724-6600"
                  },
                  "workPhoneExtension": {
                      "type": "string",
                      "x-samplevalue": "1272"
                  },
                  "workPhonePlusExtension": {
                      "type": "string",
                      "x-samplevalue": "801-724-6600 ext 1272"
                  },
                  "zipcode": {
                      "type": "string",
                      "x-samplevalue": "84042"
                  }
              },
              "x-has-customfields": true,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "employees"
          },
          "BulkJobList": {
              "title": "BulkJobList",
              "type": "object",
              "properties": {
                  "record_count": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 41
                  },
                  "job_query": {
                      "type": "string",
                      "x-samplevalue": "SELECT attributes.organizationid, attributes.systemuserid, organizationid FROM users WHERE organizationid = '3b80f68d-b945-4208-9442-f55bd0e1c5b2'"
                  },
                  "job_reset_attempt": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 0
                  },
                  "completion_time": {
                      "type": "integer",
                      "format": "int64",
                      "x-samplevalue": 1542829827804
                  },
                  "job_status": {
                      "type": "string",
                      "x-samplevalue": "COMPLETED"
                  },
                  "notification_url": {
                      "type": "string"
                  },
                  "job_direction": {
                      "type": "string",
                      "x-samplevalue": "DOWNLOAD"
                  },
                  "error_count": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 0
                  },
                  "job_state": {
                      "type": "string"
                  },
                  "createdDate": {
                      "type": "integer",
                      "format": "int64",
                      "x-samplevalue": 1542829826619
                  },
                  "job_id": {
                      "type": "integer",
                      "format": "int32",
                      "x-samplevalue": 1722
                  },
                  "object_name": {
                      "type": "string",
                      "x-samplevalue": "systemuser"
                  },
                  "fileFormat": {
                      "type": "string",
                      "x-samplevalue": "csv"
                  }
              }
          },
          "objectsMetadataFields": {
              "type": "object",
              "properties": {
                  "mask": {
                      "type": "string"
                  },
                  "type": {
                      "type": "string"
                  },
                  "vendorDisplayName": {
                      "type": "string"
                  },
                  "vendorPath": {
                      "type": "string"
                  },
                  "vendorReadOnly": {
                      "type": "boolean"
                  },
                  "vendorRequired": {
                      "type": "boolean"
                  }
              }
          },
          "bulkDownloadRequestDocsHubDetails": {
              "title": "docsHubDetails",
              "type": "object",
              "properties": {
                  "instanceId": {
                      "type": "string",
                      "x-samplevalue": "1234"
                  },
                  "path": {
                      "type": "string",
                      "x-samplevalue": "/myfolder/in/googledrive/myfilename.extention"
                  }
              }
          },
          "employeesPatch": {
              "title": "employeesPatch",
              "type": "object",
              "properties": {
                  "address1": {
                      "type": "string",
                      "x-samplevalue": "9856 Albion St"
                  },
                  "address2": {
                      "type": "string",
                      "x-samplevalue": "Bent tree"
                  },
                  "age": {
                      "type": "string",
                      "x-samplevalue": "27"
                  },
                  "bestEmail": {
                      "type": "string",
                      "x-samplevalue": "charlotte@efficientoffice.com",
                      "x-sub-format": "email"
                  },
                  "birthday": {
                      "type": "string",
                      "x-samplevalue": "07-01"
                  },
                  "city": {
                      "type": "string",
                      "x-samplevalue": "Lindon"
                  },
                  "country": {
                      "type": "string",
                      "x-samplevalue": "United States"
                  },
                  "dateOfBirth": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "1990-07-01"
                  },
                  "department": {
                      "type": "string",
                      "x-samplevalue": "Human Resources"
                  },
                  "displayName": {
                      "type": "string",
                      "x-samplevalue": "x y Abbott"
                  },
                  "eeo": {
                      "type": "string",
                      "x-samplevalue": "Service Workers"
                  },
                  "ethnicity": {
                      "type": "string",
                      "x-samplevalue": "White"
                  },
                  "exempt": {
                      "type": "string",
                      "x-samplevalue": "Exempt"
                  },
                  "firstName": {
                      "type": "string",
                      "x-samplevalue": "x y"
                  },
                  "gender": {
                      "type": "string",
                      "enum": [
                          "Male",
                          "Female"
                      ],
                      "x-samplevalue": "Female"
                  },
                  "hireDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2018-03-11"
                  },
                  "homeEmail": {
                      "type": "string",
                      "x-samplevalue": "cb@gmail.com",
                      "x-sub-format": "email"
                  },
                  "homePhone": {
                      "type": "string",
                      "x-samplevalue": "415-555-9630"
                  },
                  "id": {
                      "type": "string",
                      "x-readOnly": true,
                      "x-samplevalue": "4"
                  },
                  "isPhotoUploaded": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "jobTitle": {
                      "type": "string",
                      "x-samplevalue": "Sr. HR Administrator"
                  },
                  "lastChanged": {
                      "type": "string",
                      "format": "date-time",
                      "x-mask": "yyyy-MM-dd'T'HH:mm:ssZ",
                      "x-samplevalue": "2018-04-04T19:03:49+00:00"
                  },
                  "lastName": {
                      "type": "string",
                      "x-samplevalue": "Abbott"
                  },
                  "linkedIn": {
                      "type": "string",
                      "x-samplevalue": "www.linkedin.com"
                  },
                  "location": {
                      "type": "string",
                      "x-samplevalue": "Lindon, Utah"
                  },
                  "maritalStatus": {
                      "type": "string",
                      "enum": [
                          "Single",
                          "Married",
                          "Domestic Partnership"
                      ],
                      "x-samplevalue": "Married"
                  },
                  "middleName": {
                      "type": "string",
                      "x-samplevalue": "Danielle"
                  },
                  "mobilePhone": {
                      "type": "string",
                      "x-samplevalue": "415-555-8965"
                  },
                  "originalHireDate": {
                      "type": "string",
                      "x-samplevalue": "0000-00-00"
                  },
                  "payChangeReason": {
                      "type": "string",
                      "x-samplevalue": "Promotion"
                  },
                  "payPer": {
                      "type": "string",
                      "x-samplevalue": "Year"
                  },
                  "payPeriod": {
                      "type": "string",
                      "enum": [
                          "Daily",
                          "Weekly",
                          "Every other week",
                          "Twice a month",
                          "Monthly",
                          "Quarterly",
                          "Twice ayear",
                          "Yearly"
                      ],
                      "x-samplevalue": "Twice a month"
                  },
                  "payRate": {
                      "type": "string",
                      "x-samplevalue": "65000.00 USD"
                  },
                  "payRateEffectiveDate": {
                      "type": "string",
                      "format": "date",
                      "x-mask": "yyyy-MM-dd",
                      "x-samplevalue": "2017-03-22"
                  },
                  "paySchedule": {
                      "type": "string",
                      "x-samplevalue": "Twice a month"
                  },
                  "payScheduleId": {
                      "type": "string",
                      "x-samplevalue": "18347"
                  },
                  "payType": {
                      "type": "string",
                      "enum": [
                          "hourly",
                          "salary",
                          "commission",
                          "exception hourly",
                          "monthly",
                          "weekly",
                          "piece rate",
                          "contract",
                          "daily",
                          "pro data"
                      ],
                      "x-samplevalue": "Salary"
                  },
                  "photoUploaded": {
                      "type": "boolean",
                      "x-samplevalue": true
                  },
                  "photoUrl": {
                      "type": "string",
                      "x-samplevalue": "https://02f04eb30e85e771b233-ee8ba08b3a40a8dacb36d2897dac0b32.ssl.cf1.rackcdn.com/photos/4-0-1.jpg"
                  },
                  "preferredName": {
                      "type": "string",
                      "x-samplevalue": "cb"
                  },
                  "sin": {
                      "type": "string",
                      "x-samplevalue": "121 212 121 "
                  },
                  "ssn": {
                      "type": "string",
                      "x-samplevalue": "555-64-8712"
                  },
                  "state": {
                      "type": "string",
                      "x-samplevalue": "UT"
                  },
                  "stateCode": {
                      "type": "string",
                      "x-samplevalue": "UT"
                  },
                  "status": {
                      "type": "string",
                      "x-samplevalue": "Active"
                  },
                  "terminationDate": {
                      "type": "string",
                      "x-samplevalue": "0000-00-00"
                  },
                  "workEmail": {
                      "type": "string",
                      "x-samplevalue": "charlotte@efficientoffice.com",
                      "x-sub-format": "email"
                  },
                  "workPhone": {
                      "type": "string",
                      "x-samplevalue": "801-724-6600"
                  },
                  "workPhoneExtension": {
                      "type": "string",
                      "x-samplevalue": "1272"
                  },
                  "workPhonePlusExtension": {
                      "type": "string",
                      "x-samplevalue": "801-724-6600 ext 1272"
                  },
                  "zipcode": {
                      "type": "string",
                      "x-samplevalue": "84042"
                  }
              },
              "x-has-customfields": true,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "employees"
          },
          "employeesPostRes": {
              "title": "employeesPostRes",
              "type": "object",
              "properties": {
                  "id": {
                      "type": "string",
                      "x-samplevalue": "119"
                  }
              },
              "x-has-customfields": false,
              "x-primary-key": [
                  "id"
              ],
              "x-vendor-objectname": "employees"
          },
          "swaggerpost": {
              "title": "post",
              "type": "object",
              "properties": {
                  "summary": {
                      "type": "string",
                      "x-samplevalue": "Create a new contact in the CRM service. Contact creation will flow through Cloud Elements to your CRM service. With the exception of the 'id' field, the required fields indicated in the 'Contact' model are those required to create a new contact."
                  },
                  "operationId": {
                      "type": "string",
                      "x-samplevalue": "createContact"
                  },
                  "responses": {
                      "$ref": "#/components/schemas/swaggerresponses"
                  },
                  "parameters": {
                      "type": "array",
                      "items": {
                          "$ref": "#/components/schemas/swaggerparameters"
                      }
                  },
                  "tags": {
                      "type": "array",
                      "items": {
                          "type": "string"
                      },
                      "x-samplevalue": [
                          "contacts"
                      ]
                  }
              },
              "x-has-customfields": false
          },
          "swaggertags": {
              "title": "tags",
              "type": "object",
              "properties": {
                  "name": {
                      "type": "string",
                      "x-samplevalue": "contacts"
                  }
              },
              "x-has-customfields": false
          }
      },
      "requestBodies": {
          "Object": {
              "description": "The {objectName}",
              "content": {
                  "application/json": {
                      "schema": {
                          "$ref": "#/components/schemas/Object"
                      }
                  }
              },
              "required": true
          }
      }
  }
}
}